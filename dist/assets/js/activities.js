(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _stories = require('./util/stories.js');

var _stories2 = _interopRequireDefault(_stories);

var _cat = require('./util/cat.js');

var _cat2 = _interopRequireDefault(_cat);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 'use strict';

var a = axios.create({
	// baseURL: window._burl // set in HTML via wordpress
	baseURL: 'http://doe.concordia.ca/cslp/wp-json/wp/v2/' // development
	// baseURL: 'http://10.106.133.138/~mheming/resources/wp-json/wp/v2/'
});

// app state
var state = {};
state.drillLevel = 0;
state.active = 'none';
state.levelstring = '';
state.themeID = null; // for further caching. Implement later!
state.backone = function () {
	this.drillLevel -= 1;
	console.log('state.drillLevel: ', state.drillLevel);
	if (this.drillLevel <= 0) {
		document.getElementById('drilldown').setAttribute('data-active', 'none');
		document.getElementById('stories__by-cat').className = 'selected';
	}
	if (this.drillLevel == 1) {
		document.getElementById('cat-meta').className = '';
		document.getElementById('story').className = 'hidden';
	}
};
state.hidemeta = function () {
	document.querySelectorAll('.stories-meta')[0].className = 'stories-meta hidden';
};

var categsContainer = document.getElementById('stories__by-cat');
var categItems = categsContainer.querySelectorAll('.category-card');
document.getElementById('cat-meta').className = 'hidden';

var d = document.getElementById('drilldown');

// implement the logic on each Category Item
categItems.forEach(function (item) {
	item.addEventListener('click', function (e) {
		e.preventDefault();
		var ID = item.getAttribute('data-cat');

		if (!_cat2.default.isCached(ID)) {
			_cat2.default.get(ID, a, function (data) {
				console.log('retrieved live data: ID #' + ID);
				state.levelstring = 'By category > ' + data.name;
				_cat2.default.setDOM(data, state, _stories2.default, a);
			});
		} else {
			var data = JSON.parse(localStorage.getItem('abra_ac' + ID));
			console.log('retrieved cached data: ID #' + ID);
			state.levelstring = 'By category > ' + data.name;
			_cat2.default.setDOM(data, state, _stories2.default, a);
		}
		categsContainer.className = '';
		d.setAttribute('data-active', 'cat');
	});
});

document.getElementById('back-button').addEventListener('click', function () {
	state.backone();
});

},{"./util/cat.js":2,"./util/stories.js":3}],2:[function(require,module,exports){
'use strict';

module.exports = {
	isCached: function isCached(ID) {
		return localStorage.getItem('abra_ac' + ID) ? true : false;
	},

	cache: function cache(data) {
		localStorage.setItem('abra_ac' + data.id, JSON.stringify(data));
	},

	get: function get(catID, axios, callback) {
		var _this = this;

		axios.get('activity_cat/' + catID).then(function (response) {
			_this.cache(response.data);
			callback(response.data);
		}).catch('error', function (error) {
			console.warn(error);
			return null;
		});
	},

	setDOM: function setDOM(cat, state, story, axios) {
		// set the element to visible
		//
		var c = document.getElementById('cat-meta');
		state.drillLevel = 1; // not implemented
		document.getElementById('cat-meta').className = '';
		document.getElementById('story').className = 'hidden';

		console.log('cat: ', cat);

		// set meta description
		c.querySelectorAll('#cat-meta__header h2')[0].innerHTML = cat.name;
		c.querySelectorAll('#cat-meta__header span')[0].innerHTML = state.levelstring;
		document.getElementById('cat-meta__content').innerHTML = cat.description;

		// set async
		setTimeout( //  + '&fields=id,title,stories_description' :(
		story.getRelatedStories('activity?activity_cat=' + cat.id, function (stories) {
			var list = document.getElementById('cat-meta__list');
			list.className = 'isRefreshing';
			list.innerHTML = '';

			// create story previews

			var _loop = function _loop() {
				var s = stories[i];

				var el = document.createElement('div');
				el.className = 'story';
				el.setAttribute('data-story', s.id);
				el.innerHTML = '<h3>' + s.title.rendered + '</h3>' + '<p>' + s.stories_description + '</p>' + '<p class="meta"><b>Level:</b> ' + story.level(s.story_level) + '</p>';

				document.getElementById('cat-meta__list').appendChild(el);

				el.addEventListener('click', function () {
					state.drillLevel += 1;
					story.showStory(s, state);
					story.getActivityIcon(s.id, axios);
					story.getStoriesInCat('', function (data) {}, axios);
				});
			};

			for (var i = stories.length - 1; i >= 0; i--) {
				_loop();
			}
			list.className = '';
		}, axios), 0);
	}
};

},{}],3:[function(require,module,exports){
'use strict';

// Should technically be 'activity'

module.exports = {
	// Story Functions
	getRelatedStories: function getRelatedStories(query, callback, axios) {
		axios.get(query).then(function (res) {
			callback(res.data);
		}).catch('error', function (e) {
			console.warn(e);
		});
	},

	showStory: function showStory(a, state) {
		document.getElementById('cat-meta').className = 'hidden';

		var s = document.getElementById('story');
		s.className = '';
		document.getElementById('story-title').innerHTML = a.title.rendered;
		s.querySelectorAll('header span')[0].innerHTML = state.levelstring + ' > ' + a.title.rendered;

		document.getElementById('a-overview-c').innerHTML = '<h4>Overview</h4>' + a.activity_description_activity_objective;
		document.getElementById('a-gfa-c').innerHTML = '<h4>Group Facilitation Tips</h4>' + a.activity_description_activity_gfa;
		if (a.activity_description_activity_has_insights) {}

		document.getElementById('a-level-c').innerHTML = '<h4>Levels</h4>' + a.activity_description_activity_level;

		document.getElementById('activity-video-container').innerHTML = this.makeEmbedLink(a.activity_video);

		console.log('activity: ', a);
	},

	/**
  * Returns the strig associated with each level
  * @param  {int} int [the story's level]
  * @return {string}  [corresponding level]
  */
	level: function level(int) {
		var i = parseInt(int);
		switch (i) {
			case 1:
				return 'Beginner';
			case 2:
				return 'Easy';
			case 3:
				return 'Average';
			case 4:
				return 'Advanced';
			case 5:
				return 'Expert';
		}
	},
	makeTabContainer: function makeTabContainer(data) {},
	getActivityIcon: function getActivityIcon(query, axios) {
		axios.get('media?parent=' + query).then(function (res) {
			document.getElementById('activity-icon').innerHTML = '<img src="' + res.data[0].media_details.sizes.thumbnail.source_url + '" alt="' + res.data[0].alt_text + '">';
		}).catch('error', function (e) {
			return console.warn(e);
		});
	},
	getStoriesInCat: function getStoriesInCat(query, callback, axios) {
		axios.get(query).then(function (res) {
			callback(res.data);
		}).catch('error', function (e) {
			console.warn(e);
		});
	},
	makeEmbedLink: function makeEmbedLink(link) {
		var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
		var match = link.match(regExp);

		if (match && match[2].length != 11) {
			return 'error';
		}

		var embed = '<iframe width="560" height="315" src="//www.youtube.com/embed/';
		return embed + match[2] + '" frameborder="0" allowfullscreen></iframe>';
	}
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
